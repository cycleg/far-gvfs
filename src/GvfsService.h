#pragma once

#include <memory>
#include <string>
#include <thread>
#include <gtkmm.h>
#include "GvfsServiceException.h"

class UiCallbacks;

/// 
/// Обертка вокруг Gtkmm для операций с ресурсами GVFS.

/// Реализует три операции:
/// * подсоединение ресурса;
/// * отсоединение ресурса;
/// * проверка статуса ресурса (подсоединен или нет).
///
/// Хотя внутри операции выполняются асинхронно, интерфейс самого класса -
/// синхронный. После завершения одной из трех вышеуказанных операций в этом
/// же экземпляре может быть запущена другая.
///
/// Класс не потокобезопасный из-за уродливого "объезда" ошибки в glibmm
/// v2.50.0. Подробнее см. в GvfsService.cpp.
///
/// @author invy, cycleg
///
class GvfsService
{
public:
    ///
    /// Конструктор.
    ///
    /// @param uic Обратные вызовы для взаимодействия с пользователем (необязательный)
    ///
    /// Реализует шаблон "Стратегия" для данного класса. Если отсутствует,
    /// то операции производятся без участия пользователя.
    ///
    GvfsService(UiCallbacks* uic = nullptr);

    ///
    /// Имя подмонтированного ресурса. Если ресурс не подмонтирован -- пустая
    /// строка.
    ///
    inline const std::string& getMountName() const { return m_mountName; }
    ///
    /// Абсолютный путь в локальной файловой системе к подмонтированному
    /// ресурсу. Если ресурс не подмонтирован -- пустая строка.
    ///
    inline const std::string& getMountPath() const { return m_mountPath; }

    ///
    /// Подсоединить указанный ресурс.
    ///
    /// @param resPath URL ресурса
    /// @param userName Имя пользователя для аутентификации на ресурсе.
    /// @param password Пароль для аутентификации на ресурсе.
    /// @return Результат операции
    ///
    /// В случае успеха заполняются свойства "имя ресурса" и "путь к ресурсу".
    ///
    /// В случае неудачного завершения операции порождает исключение
    /// GvfsServiceException.
    ///
    bool mount(const std::string& resPath, const std::string &userName,
               const std::string &password) throw(GvfsServiceException);
    ///
    /// Отсоединить указанный ресурс.
    ///
    /// @param resPath URL ресурса
    /// @return Результат операции
    ///
    /// Если возвращает true, то ресурс успешно отсоединен или не был
    /// подмонтирован. В случае false - ресурс отмонтировать не удалось.
    /// В случае неудачного завершения операции может породить исключение
    /// GvfsServiceException. Ошибки трактуются как отсутствие соединения
    /// с ресурсом.
    /// Если соединение отсутствует или ресурс успешно отмонтирован,
    /// свойства "имя ресурса" и "путь к ресурсу" сбрасываются.
    ///
    bool umount(const std::string& resPath) throw(GvfsServiceException);
    ///
    /// Проверить статус, наличие соединения, ресурса.
    ///
    /// @param resPath URL ресурса
    /// @return Результат операции
    ///
    /// В случае, если ресурс подсоединен, заполняются свойства "имя
    /// ресурса" и "путь к ресурсу".
    ///
    bool mounted(const std::string& resPath);

private:

// "Чистые" C++-слоты отложены до лучших времен. Подробнее см. в
// GvfsService.cpp.

#if 0
    ///
    /// Слот обработки сигнала "ask question" в процедуре монтирования.
    ///
    /// @param mount_operation Текущая операция монтирования
    /// @param msg Сообщение (вопрос) пользователю
    /// @param choices Варианты ответа
    ///
    /// Через указатель на экземпляр класса UiCallbacks вопрос и варианты
    /// ответа отображаются пользователю, а выбранный вариант передается
    /// в операцию монтирования. Если пользователь откзывается от выбора,
    /// процедура прерывается.
    ///
    /// Если свойство m_uiCallbacks не заполнено, процедура продолжается
    /// таким образом, как будто выбран вариант по умолчанию - первый из
    /// предложенных.
    ///
    void on_ask_question(Glib::RefPtr<Gio::MountOperation>& mount_operation,
                         const Glib::ustring& msg,
                         const Glib::StringArrayHandle& choices);
    ///
    /// Слот обработки сигнала "ask password" в процедуре монтирования.
    ///
    /// @param mount_operation Текущая операция монтирования
    /// @param msg Сообщение пользователю
    /// @param defaultUser Имя пользователя по умолчанию
    /// @param defaultdomain Домен по умолчанию
    /// @param flags Флаги (опции) запроса
    ///
    /// В текущей реализации слот может только разрешить анонимное соединение,
    /// в начале процедуры запрещенное. Все аутентификационные атрибуты (имя
    /// пользователя и пароль, домен в текущей реализации всегда пустая
    /// строка) задаются в начале процедуры, в методе mount(). Анонимное
    /// подключение возможно, если не заданы ни имя пользователя, ни пароль.
    ///
    void on_ask_password(Glib::RefPtr<Gio::MountOperation>& mount_operation,
                         const Glib::ustring& msg,
                         const Glib::ustring& defaultUser,
                         const Glib::ustring& defaultdomain,
                         Gio::AskPasswordFlags flags);
#endif

// "Смешанные" слоты обработки сигналов. Слоты регистрируются через
// C-интерфейс glib, подробнее см. в GvfsService.cpp.

    ///
    /// Слот обработки сигнала "ask question" в процедуре монтирования.
    ///
    /// @param op Текущая операция монтирования
    /// @param message Сообщение (вопрос) пользователю
    /// @param choices Варианты ответа
    /// @param user_data Расширенные данные (не используется)
    ///
    /// Через указатель на экземпляр класса UiCallbacks вопрос и варианты
    /// ответа отображаются пользователю, а выбранный вариант передается
    /// в операцию монтирования. Если пользователь откзывается от выбора,
    /// процедура монтирования прерывается.
    ///
    /// Если свойство m_uiCallbacks не заполнено, процедура продолжается
    /// таким образом, как будто выбран вариант по умолчанию -- первый из
    /// предложенных.
    ///
    void on_ask_question(GMountOperation* op, char* message, char** choices,
                         gpointer user_data);
    ///
    /// Слот обработки сигнала "ask password" в процедуре монтирования.
    ///
    /// @param mount_operation Текущая операция монтирования
    /// @param msg Сообщение пользователю
    /// @param defaultUser Имя пользователя по умолчанию
    /// @param defaultdomain Домен по умолчанию
    /// @param flags Флаги (опции) запроса.
    ///
    /// В текущей реализации слот может только разрешить анонимное соединение,
    /// в начале процедуры запрещенное. Все аутентификационные атрибуты (имя
    /// пользователя и пароль, домен в текущей реализации всегда пустая
    /// строка) задаются в начале процедуры, в методе mount(). Анонимное
    /// подключение возможно, если не заданы ни имя пользователя, ни пароль.
    ///
    void on_ask_password(GMountOperation* op, const char* message,
                         const char* default_user, const char* default_domain,
                         GAskPasswordFlags flags);

// "Чистый" C++-слот.

    ///
    /// Слот обработки сигнала "aborted" в процедуре монтирования.
    ///
    /// @param mount_operation Текущая операция монтирования
    ///
    /// В текущей реализации -- заглушка.
    ///
    void on_aborted(Glib::RefPtr<Gio::MountOperation>& mount_operation);

    ///
    /// Слот асинхронного завершения процедуры монтирования.
    ///
    /// @param result Результат текущей операции
    ///
    /// В случае возникновения исключения в слоте, оно транслируется в
    /// GvfsServiceException и сохраняется в свойстве m_exception. Это
    /// исключение будет проброшено в методе mount().
    ///
    void mount_cb(Glib::RefPtr<Gio::AsyncResult>& result);
    ///
    /// Слот асинхронного завершения процедуры отмонтирования.
    ///
    /// @param result Результат текущей операции
    /// @return Отмонтирован ресурс или нет
    ///
    /// В случае возникновения исключения в слоте, оно транслируется в
    /// GvfsServiceException и сохраняется в свойстве m_exception. Это
    /// исключение будет проброшено в методе umount().
    ///
    bool unmount_cb(Glib::RefPtr<Gio::AsyncResult>& result);
    ///
    /// Слот асинхронного завершения проверки статуса ресурса.
    ///
    /// @param result Результат текущей операции
    /// @return Указатель на экземпляр Gio::Mount для искомого ресурса
    ///
    /// Если ресурс не смонтирован ранее, возвращает пустой указатель.
    ///
    Glib::RefPtr<Gio::Mount> find_mount_cb(Glib::RefPtr<Gio::AsyncResult>& result);

    int m_mountCount;
    std::string m_mountName; ///< свойство "имя ресурса" для текущего
                             ///< смонтированного ресурса
    std::string m_mountPath; ///< свойство "путь к ресурсу" для текущего
                             ///< смонтированного ресурса
    Glib::RefPtr<Gio::File> m_file; ///< Соответствует ресурсу текущей операции.
    Glib::RefPtr<Glib::MainLoop> m_mainLoop;
    std::shared_ptr<GvfsServiceException> m_exception; ///< исключение, возникшее
                                                       ///< в ходе процедуры
                                                       ///< монтирования/отмонтирования
    UiCallbacks* m_uiCallbacks; ///< обратные вызовы UI
};
