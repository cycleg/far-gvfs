#pragma once

#include <memory>
#include <string>
#include <thread>
#include <gtkmm.h>
#include "GvfsServiceException.h"

class UiCallbacks;

/// 
/// @brief Обертка вокруг Gtkmm для операций с ресурсами GVFS

/// Реализует три операции:
/// * подсоединение ресурса;
/// * отсоединение ресурса;
/// * проверка статуса ресурса (подсоединен или нет).
///
/// Хотя внутри операции выполняются асинхронно, интерфейс самого класса --
/// синхронный. После завершения одной из трех вышеуказанных операций в этом
/// же экземпляре может быть запущена другая.
///
/// @authors invy, cycleg
///
class GvfsService
{
public:
    ///
    /// Конструктор.
    ///
    /// @param [in] uic Обратные вызовы для взаимодействия с пользователем
    ///                 (необязательный).
    ///
    /// Через обратные вызовы реализуется шаблон "Стратегия" для данного
    /// класса. Если они отсутствуют, то операции производятся без участия
    /// пользователя.
    ///
    GvfsService(UiCallbacks* uic = nullptr);

    ///
    /// Имя подмонтированного ресурса.
    ///
    /// @return Имя подмонтированного ресурса.
    ///
    /// Если ресурс не подмонтирован -- пустая строка.
    ///
    inline const std::string& getMountName() const { return m_mountName; }
    ///
    /// Абсолютный путь в локальной файловой системе к подмонтированному
    /// ресурсу.
    ///
    /// @return Путь в локальной файловой системе.
    ///
    /// Если ресурс не подмонтирован -- пустая строка.
    ///
    inline const std::string& getMountPath() const { return m_mountPath; }
    ///
    /// Схема из URI подмонтированного ресурса.
    ///
    /// @return Схема из URI.
    ///
    /// Если ресурс не подмонтирован -- пустая строка.
    ///
    inline const std::string& getMountScheme() const { return m_mountScheme; }

    ///
    /// Подсоединить указанный ресурс.
    ///
    /// @param [in] resPath URL ресурса.
    /// @param [in] userName Имя пользователя для аутентификации на ресурсе.
    /// @param [in] password Пароль для аутентификации на ресурсе.
    /// @return Результат операции.
    ///
    /// В случае успеха заполняются свойства "имя ресурса", "путь к ресурсу"
    /// и "схема из URI ресурса".
    ///
    /// В случае неудачного завершения операции порождает исключение
    /// GvfsServiceException.
    ///
    /// Если в данном экземпляре уже запущена другая операция, немедленно
    /// возвращает false (для использования в будущем).
    ///
    bool mount(const std::string& resPath, const std::string &userName,
               const std::string &password) throw(GvfsServiceException);
    ///
    /// Отсоединить указанный ресурс.
    ///
    /// @param [in] resPath URL ресурса.
    /// @return Результат операции.
    ///
    /// Если возвращает true, то ресурс успешно отсоединен или не был
    /// подмонтирован. В случае false - ресурс отмонтировать не удалось.
    /// В случае неудачного завершения операции может породить исключение
    /// GvfsServiceException. Ошибки трактуются как отсутствие соединения
    /// с ресурсом.
    ///
    /// Если соединение отсутствует или ресурс успешно отмонтирован,
    /// свойства "имя ресурса", "путь к ресурсу" и "схема из URI ресурса"
    /// сбрасываются.
    ///
    /// Если в данном экземпляре уже запущена другая операция, немедленно
    /// возвращает false (для использования в будущем).
    ///
    bool umount(const std::string& resPath) throw(GvfsServiceException);
    ///
    /// Проверить статус, наличие соединения, ресурса.
    ///
    /// @param [in] resPath URL ресурса.
    /// @return Результат операции.
    ///
    /// В случае, если ресурс подсоединен, заполняются свойства "имя
    /// ресурса", "путь к ресурсу" и "схема из URI ресурса".
    ///
    /// Если в данном экземпляре уже запущена другая операция, немедленно
    /// возвращает false (для использования в будущем).
    ///
    bool mounted(const std::string& resPath);

private:

// "Чистые" C++-слоты отложены до лучших времен. Подробнее см. в
// GvfsService.cpp.

#if 0
    ///
    /// Слот обработки сигнала "ask question" в процедуре монтирования.
    ///
    /// @param [in] mount_operation Текущая операция монтирования.
    /// @param [in] msg Сообщение (вопрос) пользователю.
    /// @param [in] choices Варианты ответа.
    ///
    /// Через указатель на экземпляр класса UiCallbacks вопрос и варианты
    /// ответа отображаются пользователю, а выбранный вариант передается
    /// в операцию монтирования. Если пользователь откзывается от выбора,
    /// процедура прерывается.
    ///
    /// Если свойство m_uiCallbacks не заполнено, процедура продолжается
    /// таким образом, как будто выбран вариант по умолчанию - первый из
    /// предложенных.
    ///
    void on_ask_question(Glib::RefPtr<Gio::MountOperation>& mount_operation,
                         const Glib::ustring& msg,
                         const Glib::StringArrayHandle& choices);
    ///
    /// Слот обработки сигнала "ask password" в процедуре монтирования.
    ///
    /// @param [in] mount_operation Текущая операция монтирования.
    /// @param [in] msg Сообщение пользователю.
    /// @param [in] defaultUser Имя пользователя по умолчанию.
    /// @param [in] defaultdomain Домен по умолчанию.
    /// @param [in] flags Флаги (опции) запроса.
    ///
    /// В текущей реализации слот может только разрешить анонимное соединение,
    /// в начале процедуры запрещенное. Все аутентификационные атрибуты (имя
    /// пользователя и пароль, домен в текущей реализации всегда пустая
    /// строка) задаются в начале процедуры, в методе mount(). Анонимное
    /// подключение возможно, если не заданы ни имя пользователя, ни пароль.
    ///
    void on_ask_password(Glib::RefPtr<Gio::MountOperation>& mount_operation,
                         const Glib::ustring& msg,
                         const Glib::ustring& defaultUser,
                         const Glib::ustring& defaultdomain,
                         Gio::AskPasswordFlags flags);
#endif

// "Смешанные" слоты обработки сигналов. Слоты регистрируются через
// C-интерфейс glib, подробнее см. в GvfsService.cpp.

    ///
    /// Слот обработки сигнала "ask question" в процедуре монтирования.
    ///
    /// @param [in] op Текущая операция монтирования.
    /// @param [in] message Сообщение (вопрос) пользователю.
    /// @param [in] choices Варианты ответа.
    /// @param [in] user_data Расширенные данные (не используется).
    ///
    /// Через указатель на экземпляр класса UiCallbacks вопрос и варианты
    /// ответа отображаются пользователю, а выбранный вариант передается
    /// в операцию монтирования. Если пользователь откзывается от выбора,
    /// процедура монтирования прерывается.
    ///
    /// Если свойство m_uiCallbacks не заполнено, процедура продолжается
    /// таким образом, как будто выбран вариант по умолчанию -- первый из
    /// предложенных.
    ///
    void on_ask_question(GMountOperation* op, char* message, char** choices,
                         gpointer user_data);
    ///
    /// Слот обработки сигнала "ask password" в процедуре монтирования.
    ///
    /// @param [in] op Текущая операция монтирования.
    /// @param [in] message Сообщение пользователю.
    /// @param [in] default_user Имя пользователя по умолчанию.
    /// @param [in] default_domain Домен по умолчанию.
    /// @param [in] flags Флаги (опции) запроса.
    ///
    /// В текущей реализации слот может только разрешить анонимное соединение,
    /// в начале процедуры запрещенное. Все аутентификационные атрибуты (имя
    /// пользователя и пароль, домен в текущей реализации всегда пустая
    /// строка) задаются в начале процедуры, в методе mount(). Анонимное
    /// подключение возможно, если не заданы ни имя пользователя, ни пароль.
    ///
    void on_ask_password(GMountOperation* op, const char* message,
                         const char* default_user, const char* default_domain,
                         GAskPasswordFlags flags);

// "Чистый" C++-слот.

    ///
    /// Слот обработки сигнала "aborted" в процедуре монтирования.
    ///
    /// @param [in] mount_operation Текущая операция монтирования.
    ///
    /// В текущей реализации -- заглушка.
    ///
    void on_aborted(Glib::RefPtr<Gio::MountOperation>& mount_operation);

    ///
    /// Слот асинхронного завершения процедуры монтирования.
    ///
    /// @param [in] result Результат текущей операции.
    ///
    /// В случае возникновения исключения в слоте, оно транслируется в
    /// GvfsServiceException и сохраняется в свойстве m_exception. Это
    /// исключение будет проброшено в методе mount().
    ///
    void mount_cb(Glib::RefPtr<Gio::AsyncResult>& result);
    ///
    /// Слот асинхронного завершения процедуры отмонтирования.
    ///
    /// @param [in] result Результат текущей операции.
    /// @return Отмонтирован ресурс или нет.
    ///
    /// В случае возникновения исключения в слоте, оно транслируется в
    /// GvfsServiceException и сохраняется в свойстве m_exception. Это
    /// исключение будет проброшено в методе umount().
    ///
    bool unmount_cb(Glib::RefPtr<Gio::AsyncResult>& result);
    ///
    /// Слот асинхронного завершения проверки статуса ресурса.
    ///
    /// @param [in] result Результат текущей операции.
    /// @return Указатель на экземпляр Gio::Mount для искомого ресурса.
    ///
    /// Если ресурс не смонтирован ранее, возвращает пустой указатель.
    ///
    Glib::RefPtr<Gio::Mount> find_mount_cb(Glib::RefPtr<Gio::AsyncResult>& result);

    std::string m_mountName; ///< Свойство "имя ресурса" для текущего
                             ///< смонтированного ресурса.
    std::string m_mountPath; ///< Свойство "путь к ресурсу" для текущего
                             ///< смонтированного ресурса.
    std::string m_mountScheme; ///< Свойство "схема из URI ресурса" для
                               ///< текущего смонтированного ресурса.
    Glib::RefPtr<Gio::File> m_file; ///< Соответствует ресурсу текущей операции.
    Glib::RefPtr<Glib::MainLoop> m_mainLoop; ///< Главный цикл glib.
    std::shared_ptr<GvfsServiceException> m_exception; ///< Исключение, возникшее
                                                       ///< в ходе процедуры
                                                       ///< монтирования/отмонтирования.
    UiCallbacks* m_uiCallbacks; ///< Обратные вызовы UI.
};
