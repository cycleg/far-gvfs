#pragma once

#include <string>
#include "GvfsServiceException.h"

class GvfsService;

class MountPointStorage;

///
/// Класс-хранилище для описания и состояния монтируемых ресурсов.

/// Экземпляры класса сериализуются и десериализуются с помощью класса
/// MountPointStorage. Храняться следующие свойства ресурса:
/// * URL (свойство класса m_resPath);
/// * имя пользователя для аутентификации на ресурсе (m_user);
/// * пароль (m_password);
/// * признак "спрашивать пароль перед монтированием" (m_askPassword);
/// * свойство m_storageId (используется только в MountPointStorage).
///
/// Над ресурсом опеределены три основные операции:
/// * подсоединение ресурса в локальную файловую систему;
/// * отсоединение ресурса от локальной файловой системы;
/// * проверка, подсоединен данный ресурс или нет.
///
/// Соответствующие процедуры реализуются в отдельном классе ввода/вывода,
/// указатель на экземпляр которого передается в соответствующие методы класса
/// MountPoint как параметр.
///
/// @author invy, cycleg
///
class MountPoint
{
  friend class MountPointStorage;

  public:
    ///
    /// Транспортный протокол ресурса. В текущей реализации всегда NoFs.
    ///
    enum class FileSystem {
        NoFs,
        DiskFs,
        Scp,
        Nfs,
        Samba,
        WebDav
    };

    ///
    /// Простой конструктор.
    ///
    ///  URL, имя пользователя и пароль для аутентификации пустые, пароль
    /// перед монтированием не спрашивается.
    ///
    MountPoint();
    ///
    /// Конструктор.
    ///
    /// @param resPath URL ресурса
    /// @param user Имя пользователя для аутентификации на ресурсе
    /// @param password Пароль для аутентификации на ресурсе
    ///
    /// Пароль перед монтированием не спрашивается.
    ///
    MountPoint(const std::wstring& resPath, const std::wstring& user, const std::wstring& password);
    ///
    /// Копирующий конструктор.
    ///
    /// @param other Копируемый экземпляр класса
    ///
    /// Экземпляры класса MountPoint не владеют ресурсами, поэтому могут
    /// свободно копироваться. Однако копировать смонтированные ресурсы
    /// ресурсы не рекомендуется, поскольку флаг монтирования, имя ресурса и
    /// путь к точке монтирования впоследствии могут оказаться неактуальными.
    ///
    MountPoint(const MountPoint& other);

    ///
    /// Оператор присваивания класса.
    ///
    /// @param other Копируемый экземпляр класса
    ///
    /// Экземпляры класса MountPoint не владеют ресурсами, поэтому могут
    /// свободно копироваться. Однако копировать смонтированные ресурсы
    /// ресурсы не рекомендуется, поскольку флаг смонтированности, имя ресурса
    /// и путь к точке монтирования впоследствии могут оказаться неактуальными.
    ///
    MountPoint& operator=(const MountPoint& other);

    ///
    /// Флаг смонтированности ресурса.
    /// 
    inline bool isMounted() const { return m_bMounted; }
    ///
    /// Тип ресурса. В текущей реализации всегда NoFs.
    ///
    inline FileSystem getFsType() const { return m_type; }
    ///
    /// Точка монтирования ресурса (путь) в локальной файловой системе.
    /// Пустая строка, если ресурс не смонтирован.
    ///
    inline const std::wstring& getFsPath() const { return m_mountPointPath; }
    ///
    /// Имя смонтированного ресурса. Пустая строка, если ресурс не смонтирован.
    ///
    inline const std::wstring& getMountName() const { return m_shareName; }
    ///
    /// URL ресурса.
    ///
    inline const std::wstring& getResPath() const { return m_resPath; }
    ///
    /// Имя пользователя для аутентификации на ресурсе.
    ///
    inline const std::wstring& getUser() const { return m_user; }
    ///
    /// Пароль для аутентификации на ресурсе.
    ///
    inline const std::wstring& getPassword() const { return m_password; }
    ///
    /// Флаг запроса пароля для аутентификации на ресурсе при подключении.
    ///
    inline bool getAskPassword() const { return m_askPassword; }

    ///
    /// Назначить URL ресурсу.
    ///
    /// @param s Новый URL
    /// @return Ссылка на данный экземпляр класса
    ///
    inline MountPoint& setResPath(const std::wstring& s)
    { m_resPath = s; return *this; }
    ///
    /// Назначить ресурсу имя пользователя.
    ///
    /// @param s Новое имя пользователя
    /// @return Ссылка на данный экземпляр класса
    ///
    inline MountPoint& setUser(const std::wstring& s) { m_user = s; return *this; }
    ///
    /// Назначить ресурсу пароль.
    ///
    /// @param s Новый пароль
    /// @return Ссылка на данный экземпляр класса
    ///
    inline MountPoint& setPassword(const std::wstring& s)
    { m_password = s; return *this; }
    ///
    /// Назначить ресурсу флаг запроса пароля перед монтированием.
    ///
    /// @param ask Новое значение флага
    /// @return Ссылка на данный экземпляр класса
    ///
    inline MountPoint& setAskPassword(bool ask)
    { m_askPassword = ask; return *this; }

    ///
    /// Подсоединить ресурс к локальной файловой системе.
    ///
    /// @param service Указатель на экземпляр класса ввода/вывода
    /// @return Результат операции
    ///
    /// В service передается экземпляр класса, реализующий процедуру
    /// монтирования.
    ///
    /// Если у ресурса выставлен флаг смонтированности, то метод сразу
    /// возвращает true. Если ресурсу не назначен URL, то метод сразу
    /// возвращает false.
    ///
    /// Брошенное исключение означает неудачное монтирование. Дополнительная
    /// информация содержится в экземпляре GvfsServiceException.
    ///
    /// В случае успешного монтирования заполняются свойства "имя ресурса" и
    /// "путь к ресурсу".
    ///
    /// Если у ресурса выставлен флаг "спрашивать пароль перед монтированием",
    /// то свойство m_password перед запуском процедуры монтирования
    /// копируется во внутренний буфер, а затем зачищается. Таким образом,
    /// разовый пароль должен присваиваться вызывающим кодом обычным образом
    /// перед монтированием ресурса, но после вызова mount() при выставленном
    /// флаге пароль всегда будет пустым.
    ///
    bool mount(GvfsService* service) throw(GvfsServiceException);
    ///
    /// Отсоединить ресурс от локальной файловой системы.
    ///
    /// @param service Указатель на экземпляр класса ввода/вывода
    /// @return Результат операции
    ///
    /// В service передается экземпляр класса, реализующий процедуру
    /// демонтирования.
    ///
    /// Если у ресурса не выставлен флаг смонтированности, то метод сразу
    /// возвращает true. Если ресурсу не назначен URL, то метод сразу
    /// возвращает false.
    /// 
    /// Брошенное исключение расценивается как отсутствие соединения с
    /// ресурсом, свойства класса m_mountPointPath и m_shareName сбрасываются,
    /// свойство m_bMounted выставляется в false. Таким образом, ресурс
    /// считается не смонтированным. Дополнительная информация содержится в
    /// экземпляре GvfsServiceException.
    ///
    bool unmount(GvfsService* service) throw(GvfsServiceException);
    ///
    /// Проверить статус смонтированности ресурса.
    ///
    /// @param service Указатель на экземпляр класса ввода/вывода
    ///
    /// В service передается экземпляр класса, реализующий процедуру
    /// проверки. Результат проверки можно получить, вызвав метод isMounted().
    ///
    /// Если ресурсу не задан URL, он считается не смонтированным, свойства
    /// класса m_mountPointPath и m_shareName сбрасываются, свойство
    /// m_bMounted выставляется в false.
    ///
    void mountCheck(GvfsService* service);

  private:
    bool m_bMounted; ///< признак, смонтирован ресурс или нет
    FileSystem m_type; ///< в текущей реализации всегда NoFs
    std::wstring m_resPath; ///< URL ресурса
    std::wstring m_user; ///< имя пользователя для аутентификации на ресурсе
    std::wstring m_password; ///< пароль для аутентификации на ресурсе
    std::wstring m_mountPointPath; ///< абсолютный путь точки монтирования ресурса
    std::wstring m_shareName; ///< имя точки монтирования ресурса
    std::wstring m_storageId; ///< идентификатор ресурса в хранилище;
                              ///< используется только в MountPointStorage
    bool m_askPassword; ///< признак "спрашивать пароль перед монтированием"
};
