///
/// @file MountPoint.h
///
#pragma once

#include <string>
#include "GvfsServiceException.h"

class GvfsService;

class MountPointStorage;

///
/// Класс-хранилище для описания и состояния монтируемых ресурсов.

/// Экземпляры класса сериализуются и десериализуются с помощью класса
/// MountPointStorage. Храняться следующие свойства ресурса:
/// * URL (свойство #m_url);
/// * имя пользователя для аутентификации на ресурсе (#m_user);
/// * пароль (#m_password);
/// * флаг "спрашивать пароль перед монтированием" (#m_askPassword);
/// * свойство #m_storageId (используется только в MountPointStorage).
///
/// Над ресурсом опеределены три основные операции:
/// * подсоединение ресурса в локальную файловую систему;
/// * отсоединение ресурса от локальной файловой системы;
/// * проверка, подсоединен данный ресурс или нет.
///
/// Соответствующие процедуры реализуются в отдельном классе ввода/вывода,
/// указатель на экземпляр которого передается в соответствующие методы класса
/// MountPoint как параметр.
///
/// @authors invy, cycleg
///
class MountPoint
{
  friend class MountPointStorage; ///< Для сериализации.

  public:
    ///
    /// Транспортный протокол ресурса.
    ///
    enum class EProtocol {
        File,
        Ftp,
        Http,
        Samba,
        Sftp,
        Unknown
    };

    ///
    /// Копирующий конструктор.
    ///
    /// @param [in] other Копируемый экземпляр класса.
    ///
    /// Экземпляры класса MountPoint не владеют ресурсами, поэтому могут
    /// свободно копироваться. Однако копировать смонтированные ресурсы
    /// не рекомендуется, поскольку транспортный протокол, имя ресурса и путь
    /// к точке монтирования впоследствии могут оказаться неактуальными.
    ///
    MountPoint(const MountPoint& other);

    ///
    /// Оператор присваивания класса.
    ///
    /// @param [in] other Копируемый экземпляр класса.
    /// @return Ссылка на данный экземпляр класса.
    ///
    /// Экземпляры класса MountPoint не владеют ресурсами, поэтому могут
    /// свободно копироваться. Однако копировать смонтированные ресурсы
    /// не рекомендуется, поскольку транспортный протокол, имя ресурса и путь
    /// к точке монтирования впоследствии могут оказаться неактуальными.
    ///
    MountPoint& operator=(const MountPoint& other);

    ///
    /// Признак смонтированности ресурса.
    ///
    /// @return Смонтирован ресурс или нет.
    /// 
    inline bool isMounted() const { return !m_shareName.empty(); }
    ///
    /// Используемый в ресурсе транспортный протокол.
    ///
    /// @return Протокол.
    ///
    /// Если ресурс не подмонтирован или используется неизвестный пртокол,
    /// то Unknown.
    ///
    inline EProtocol getProto() const { return m_proto; }
    ///
    /// Точка монтирования ресурса (путь) в локальной файловой системе.
    ///
    /// @return Путь в локальной файловой системе.
    ///
    /// Возвращает пустую строку, если ресурс не смонтирован.
    ///
    inline const std::wstring& getFsPath() const { return m_mountPointPath; }
    ///
    /// Имя смонтированного ресурса.
    ///
    /// @return Имя ресурса.
    ///
    /// Возвращает пустую строку, если ресурс не смонтирован.
    ///
    inline const std::wstring& getMountName() const { return m_shareName; }
    ///
    /// URL ресурса.
    ///
    /// @return URL.
    ///
    inline const std::wstring& getResPath() const { return m_url; }
    ///
    /// Имя пользователя для аутентификации на ресурсе.
    ///
    /// @return Имя пользователя.
    ///
    inline const std::wstring& getUser() const { return m_user; }
    ///
    /// Пароль для аутентификации на ресурсе.
    ///
    /// @return Пароль.
    ///
    inline const std::wstring& getPassword() const { return m_password; }
    ///
    /// Флаг запроса пароля для аутентификации на ресурсе при подключении.
    ///
    /// @return Состояние флага.
    ///
    inline bool getAskPassword() const { return m_askPassword; }
    ///
    /// Уникальный идентификатор ресурса в хранилище.
    ///
    /// @return Id.
    ///
    /// В качестве идентификаторов в хранилище используются UUID.
    ///
    inline const std::wstring& getStorageId() const { return m_storageId; }

    ///
    /// Назначить URL ресурсу.
    ///
    /// @param [in] s Новый URL.
    /// @return Ссылка на данный экземпляр класса.
    ///
    inline MountPoint& setResPath(const std::wstring& s)
    { m_url = s; return *this; }
    ///
    /// Назначить ресурсу имя пользователя.
    ///
    /// @param [in] s Новое имя пользователя.
    /// @return Ссылка на данный экземпляр класса.
    ///
    inline MountPoint& setUser(const std::wstring& s)
    { m_user = s; return *this; }
    ///
    /// Назначить ресурсу пароль.
    ///
    /// @param [in] s Новый пароль.
    /// @return Ссылка на данный экземпляр класса.
    ///
    inline MountPoint& setPassword(const std::wstring& s)
    { m_password = s; return *this; }
    ///
    /// Назначить ресурсу флаг запроса пароля перед монтированием.
    ///
    /// @param [in] ask Новое значение флага.
    /// @return Ссылка на данный экземпляр класса.
    ///
    inline MountPoint& setAskPassword(bool ask)
    { m_askPassword = ask; return *this; }

    ///
    /// Транслирует схему из URI ресурса в транспортный протокл.
    ///
    /// @param [in] scheme Схема в виде строки.
    /// @return Транспортный протокол.
    ///
    /// Если схема не распознана, возвращает Unknown. В текущей реализации
    /// распознаются протоколы из MountPoint::EProtocol.
    ///
    static EProtocol SchemeToProto(const std::string& scheme);

    ///
    /// Подсоединить ресурс к локальной файловой системе.
    ///
    /// @param [in] service Указатель на экземпляр класса ввода/вывода.
    /// @return Результат операции.
    ///
    /// В service передается экземпляр класса, реализующий процедуру
    /// монтирования.
    ///
    /// Если ресурс уже смонтирован, то метод сразу возвращает true. Если
    /// ресурсу не назначен URL, то метод сразу возвращает false.
    ///
    /// Брошенное исключение означает неудачное монтирование. Дополнительная
    /// информация содержится в экземпляре GvfsServiceException.
    ///
    /// В случае успешного монтирования заполняются свойства "имя ресурса",
    /// "путь к ресурсу" и "используемый протокол".
    ///
    /// Если у ресурса выставлен флаг "спрашивать пароль перед монтированием",
    /// то свойство #m_password перед запуском процедуры монтирования
    /// копируется во внутренний буфер, а затем зачищается. Таким образом,
    /// разовый пароль должен присваиваться вызывающим кодом обычным образом
    /// перед монтированием ресурса, но после вызова mount() при выставленном
    /// флаге пароль всегда будет пустым.
    ///
    bool mount(GvfsService* service) throw(GvfsServiceException);
    ///
    /// Отсоединить ресурс от локальной файловой системы.
    ///
    /// @param [in] service Указатель на экземпляр класса ввода/вывода.
    /// @return Результат операции.
    ///
    /// В service передается экземпляр класса, реализующий процедуру
    /// демонтирования.
    ///
    /// Если ресурса не смонтирован, то метод сразу возвращает true. Если
    /// ресурсу не назначен URL, то метод сразу возвращает false.
    /// 
    /// Брошенное исключение расценивается как отсутствие соединения с
    /// ресурсом, свойства #m_mountPointPath и #m_shareName сбрасываются,
    /// свойство #m_proto выставляется в Unknown. Таким образом, ресурс
    /// считается не смонтированным. Дополнительная информация содержится в
    /// экземпляре GvfsServiceException.
    ///
    bool unmount(GvfsService* service) throw(GvfsServiceException);
    ///
    /// Проверить статус смонтированности ресурса.
    ///
    /// @param [in] service Указатель на экземпляр класса ввода/вывода.
    ///
    /// В service передается экземпляр класса, реализующий процедуру
    /// проверки. Результат проверки можно получить, вызвав метод isMounted().
    ///
    /// Если ресурсу не задан URL, он считается не смонтированным, свойства
    /// #m_mountPointPath и #m_shareName сбрасываются, а свойство #m_proto
    /// выставляется в Unknown.
    ///
    void mountCheck(GvfsService* service);

  private:
    ///
    /// Простой конструктор.
    ///
    /// URL, имя пользователя и пароль для аутентификации пустые, флаг
    /// "спрашивать пароль перед монтированием" сброшен. Используется
    /// только в MountPointStorage.
    ///
    MountPoint();

    EProtocol m_proto; ///< Используемый транспортный протокол.
    std::wstring m_url; ///< URL ресурса.
    std::wstring m_user; ///< Имя пользователя для аутентификации на ресурсе.
    std::wstring m_password; ///< Пароль для аутентификации на ресурсе.
    std::wstring m_mountPointPath; ///< Абсолютный путь точки монтирования
                                   ///< ресурса.
    std::wstring m_shareName; ///< Имя точки монтирования ресурса.
    std::wstring m_storageId; ///< Идентификатор ресурса в хранилище;
                              ///< используется в основном в MountPointStorage.
    bool m_askPassword; ///< Флаг "спрашивать пароль перед монтированием".
};
